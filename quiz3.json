{
  "title": "C Programming: Arrays and Strings",
  "topic": "Arrays",
  "semester": "1",
  "num_questions": 10,
  "questions": [
    {
      "question": "In the array `int arr[5] = {10, 20, 30, 40, 50};`, what is the value at `arr[3]`?",
      "options": [
        "A) 30",
        "B) 40",
        "C) 50",
        "D) The address of the 3rd element"
      ],
      "correct_option": 1,
      "time_limit": 60,
      "difficulty": "Easy",
      "explanation": "Array indexing in C is 0-based. The element at index 3 is the fourth element, which is 40.",
      "language": "C"
    },
    {
      "question": "What is the primary difference between `char str[] = \"hello\";` and `char *ptr = \"hello\";`?",
      "options": [
        "A) There is no difference.",
        "B) `str` is an array whose contents can be modified; `ptr` points to a string literal which should not be modified.",
        "C) `ptr` is an array whose contents can be modified; `str` points to a string literal.",
        "D) `sizeof(str)` and `sizeof(ptr)` will be the same."
      ],
      "correct_option": 1,
      "time_limit": 120,
      "difficulty": "Hard",
      "language": "C"
    },
    {
      "question": "In C, what character terminates a string?",
      "options": [
        "A) '\\n' (newline)",
        "B) '.' (period)",
        "C) '\\0' (null character)",
        "D) EOF (End Of File)"
      ],
      "correct_option": 2,
      "time_limit": 60,
      "difficulty": "Easy",
      "language": "C"
    },
    {
      "question": "What is the output of `printf(\"%zu\", sizeof(\"world\"));`?",
      "options": [
        "A) 5",
        "B) 6",
        "C) 4",
        "D) Depends on the system architecture"
      ],
      "correct_option": 1,
      "time_limit": 90,
      "difficulty": "Medium",
      "explanation": "The size of a string literal includes the 5 characters plus the terminating null character ('\\0'), making the total size 6 bytes.",
      "language": "C"
    },
    {
      "question": "What happens if you try to access an array element outside of its bounds, e.g., `arr[10]` for an array `int arr[5];`?",
      "options": [
        "A) The compiler will always report an error.",
        "B) The program will crash gracefully.",
        "C) It leads to undefined behavior, which might include crashing or reading/writing garbage data.",
        "D) It automatically resizes the array."
      ],
      "correct_option": 2,
      "time_limit": 75,
      "difficulty": "Medium",
      "language": "C"
    },
    {
      "question": "For an array `int arr[10];`, which expression is equivalent to `arr[i]`?",
      "options": [
        "A) `*(arr + i)`",
        "B) `arr + i`",
        "C) `*arr + i`",
        "D) `&arr + i`"
      ],
      "correct_option": 0,
      "time_limit": 90,
      "difficulty": "Medium",
      "explanation": "In C, array indexing `arr[i]` is syntactic sugar for pointer arithmetic `*(arr + i)`, which dereferences the address of the i-th element.",
      "language": "C"
    },
    {
      "question": "How do you correctly declare a 2D array of integers with 3 rows and 4 columns?",
      "options": [
        "A) `int matrix[3, 4];`",
        "B) `int matrix[3][4];`",
        "C) `int matrix(3, 4);`",
        "D) `int matrix{3}{4};`"
      ],
      "correct_option": 1,
      "time_limit": 60,
      "difficulty": "Easy",
      "language": "C"
    },
    {
      "question": "When an array is passed to a function, what is actually passed?",
      "options": [
        "A) A full copy of the array.",
        "B) The address of the first element of the array.",
        "C) The size of the array.",
        "D) The value of the last element."
      ],
      "correct_option": 1,
      "time_limit": 75,
      "difficulty": "Medium",
      "language": "C"
    },
    {
      "question": "What is the value of `arr` in the declaration `int arr[5];`?",
      "options": [
        "A) The value of the first element, `arr[0]`.",
        "B) The size of the array, which is 5.",
        "C) The address of the array (i.e., the address of its first element).",
        "D) It is uninitialized and has no value."
      ],
      "correct_option": 2,
      "time_limit": 90,
      "difficulty": "Medium",
      "language": "C"
    },
    {
      "question": "What will be the output? `int arr[] = {1, 2, 3}; printf(\"%d %d\", *arr, *(arr+2));`",
      "options": [
        "A) 1 2",
        "B) 1 3",
        "C) An address and a value",
        "D) Compilation Error"
      ],
      "correct_option": 1,
      "time_limit": 120,
      "difficulty": "Hard",
      "explanation": "`*arr` dereferences the pointer to the first element (value is 1). `*(arr+2)` points to the third element (index 2) and dereferences it (value is 3).",
      "language": "C"
    }
  ]
}
